"""
Hodnocen√≠ kvality a spolehlivosti v√Ωsledk≈Ø
"""
from core.data_models import QualityLevel, CalibratedParameters, ComputationMode


def assess_quality_level(
    computation_mode: ComputationMode,
    n_days_data: int,
    calibrated_params: CalibratedParameters,
    data_warnings: list
) -> QualityLevel:
    """
    Vyhodnot√≠ √∫rove≈à spolehlivosti v√Ωsledk≈Ø.
    
    Args:
        computation_mode: pou≈æit√Ω re≈æim v√Ωpoƒçtu
        n_days_data: poƒçet dn√≠ dat
        calibrated_params: parametry kalibrace
        data_warnings: seznam varov√°n√≠ z validace
    
    Returns:
        QualityLevel
    """
    # Sk√≥re kvality (ƒç√≠m vy≈°≈°√≠, t√≠m lep≈°√≠)
    score = 0
    
    # 1. Re≈æim v√Ωpoƒçtu
    if computation_mode == ComputationMode.ADVANCED:
        score += 30
    elif computation_mode == ComputationMode.STANDARD:
        score += 20
    else:  # BASIC
        score += 5
    
    # 2. D√©lka dat
    if n_days_data >= 28:
        score += 30
    elif n_days_data >= 14:
        score += 20
    elif n_days_data >= 7:
        score += 10
    else:
        score += 2
    
    # 3. Kvalita kalibrace (RMSE teploty)
    if calibrated_params.rmse_temperature_c < 0.5:
        score += 20
    elif calibrated_params.rmse_temperature_c < 1.0:
        score += 15
    elif calibrated_params.rmse_temperature_c < 2.0:
        score += 10
    else:
        score += 2
    
    # 4. Kvalita kalibrace (MAPE energie)
    if calibrated_params.mape_energy_pct < 5:
        score += 20
    elif calibrated_params.mape_energy_pct < 10:
        score += 15
    elif calibrated_params.mape_energy_pct < 20:
        score += 10
    else:
        score += 2
    
    # 5. Penalizace za varov√°n√≠
    score -= len(data_warnings) * 5
    
    score = max(0, score)  # minim√°lnƒõ 0
    
    # Rozhodni podle sk√≥re
    if score >= 70:
        quality = QualityLevel.HIGH
    elif score >= 40:
        quality = QualityLevel.MEDIUM
    else:
        quality = QualityLevel.LOW
    
    return quality


def generate_disclaimers(
    quality_level: QualityLevel,
    computation_mode: ComputationMode,
    n_days_data: int,
    data_warnings: list
) -> list[str]:
    """
    Generuje upozornƒõn√≠ a disclaimery k v√Ωsledk≈Øm.
    
    Returns:
        Seznam text≈Ø
    """
    disclaimers = []
    
    # Z√°kladn√≠ disclaimer
    disclaimers.append(
        "‚ö† Toto NEN√ç ofici√°ln√≠ Pr≈Økaz energetick√© n√°roƒçnosti budovy (PENB). "
        "Jedn√° se o orientaƒçn√≠ odhad na z√°kladƒõ provozn√≠ch dat."
    )
    
    # Podle kvality
    if quality_level == QualityLevel.LOW:
        disclaimers.append(
            "‚ö† N√çZK√Å spolehlivost v√Ωsledk≈Ø. Doporuƒçujeme doplnit v√≠ce dat nebo "
            "pou≈æ√≠t vy≈°≈°√≠ re≈æim v√Ωpoƒçtu."
        )
    elif quality_level == QualityLevel.MEDIUM:
        disclaimers.append(
            "‚úì ST≈òEDN√ç spolehlivost v√Ωsledk≈Ø. V√Ωsledky jsou orientaƒçn√≠."
        )
    else:  # HIGH
        disclaimers.append(
            "‚úì VYSOK√Å spolehlivost v√Ωsledk≈Ø v r√°mci mo≈ænost√≠ provozn√≠ch dat."
        )
    
    # Podle re≈æimu
    if computation_mode == ComputationMode.BASIC:
        disclaimers.append(
            "Pou≈æit re≈æim BASIC - pouze hrub√Ω line√°rn√≠ odhad bez dynamick√© simulace."
        )
    
    # D√©lka dat
    if n_days_data < 14:
        disclaimers.append(
            f"M√°lo dat ({n_days_data} dn√≠). Doporuƒçeno alespo≈à 14-28 dn√≠ pro lep≈°√≠ odhad."
        )
    
    # Varov√°n√≠ z dat
    if len(data_warnings) > 0:
        disclaimers.append(
            f"Zji≈°tƒõno {len(data_warnings)} varov√°n√≠ v kvalitƒõ dat. "
            "Viz detailn√≠ zpr√°va."
        )
    
    # Metodika
    disclaimers.append(
        "V√Ωpoƒçet pou≈æ√≠v√° zjednodu≈°en√Ω 1R1C tepeln√Ω model kalibrovan√Ω "
        "na provozn√≠ data. Nezohled≈àuje v≈°echny faktory jako ofici√°ln√≠ PENB."
    )
    
    return disclaimers


def suggest_improvements(
    quality_level: QualityLevel,
    computation_mode: ComputationMode,
    n_days_data: int,
    calibrated_params: CalibratedParameters
) -> list[str]:
    """
    Navrhne zlep≈°en√≠ pro lep≈°√≠ v√Ωsledky.
    
    Returns:
        Seznam n√°vrh≈Ø
    """
    suggestions = []
    
    if computation_mode == ComputationMode.BASIC:
        suggestions.append(
            "üìà Pou≈æijte re≈æim STANDARD nebo ADVANCED pro p≈ôesnƒõj≈°√≠ v√Ωsledky"
        )
    
    if n_days_data < 28:
        suggestions.append(
            f"üìÖ Dopl≈àte v√≠ce dat - m√°te {n_days_data} dn√≠, doporuƒçeno 28+ dn√≠"
        )
    
    if calibrated_params.rmse_temperature_c > 2.0:
        suggestions.append(
            "üå°Ô∏è Vysok√° odchylka vnit≈ôn√≠ teploty - zkontrolujte, zda jste zadali "
            "spr√°vnou pr≈Ømƒõrnou teplotu nebo poskytnƒõte hodinov√° mƒõ≈ôen√≠"
        )
    
    if calibrated_params.mape_energy_pct > 20:
        suggestions.append(
            "‚ö° Vysok√° odchylka energie - zkontrolujte spr√°vnost odeƒçt≈Ø spot≈ôeby, "
            "p≈ô√≠padnƒõ oznaƒçte dny s extr√©mn√≠m chov√°n√≠m (velk√© vƒõtr√°n√≠, v√Ωpadky, ...)"
        )
    
    # Fyzik√°ln√≠ n√°vrhy
    H_total = calibrated_params.H_env_W_per_K + (
        1.2 * 1005 * calibrated_params.infiltration_rate_per_h / 3600
    )
    
    if calibrated_params.infiltration_rate_per_h > 0.8:
        suggestions.append(
            "ü™ü Vysok√° infiltrace (√∫nik vzduchu). Zva≈æte v√Ωmƒõnu oken nebo "
            "tƒõsnƒõn√≠ pro √∫sporu energie."
        )
    
    if calibrated_params.H_env_W_per_K > 200:
        suggestions.append(
            "üè† Vysok√© tepeln√© ztr√°ty ob√°lkou. Zva≈æte zateplen√≠ stƒõn/st≈ôechy."
        )
    
    if quality_level == QualityLevel.HIGH:
        suggestions.append(
            "‚úì Kvalita v√Ωsledk≈Ø je dobr√°. Pro ofici√°ln√≠ PENB kontaktujte "
            "opr√°vnƒõnou osobu."
        )
    
    return suggestions
